def binary_search(arr, x):
    low, high = 0, len(arr) - 1

    while low <= high:
        mid = (low + high) // 2
        mid_value = arr[mid]

        if mid_value == x:
            return mid  # Элемент найден, возвращаем его индекс
        elif mid_value < x:
            low = mid + 1  # Искомый элемент находится во второй половине массива
        else:
            high = mid - 1  # Искомый элемент находится в первой половине массива

    return -1  # Элемент не найден

arr = [11, 12, 22, 25, 34, 64, 90]
x = 22
result = binary_search(arr, x)

if result != -1:
    print(f"Элемент {x} найден на позиции {result}.")
else:
    print(f"Элемент {x} не найден.")


# Объяснение:

# def binary_search(arr, x):: Объявление функции binary_search с параметрами arr (упорядоченный массив) и x (искомый элемент).
# low, high = 0, len(arr) - 1: Инициализация переменных low (нижняя граница) и high (верхняя граница) для определения текущего интервала поиска.
# while low <= high:: Начало цикла, который продолжается, пока нижняя граница не станет больше верхней.
# mid = (low + high) // 2: Нахождение средней точки текущего интервала поиска.
# mid_value = arr[mid]: Получение значения элемента в середине массива.
# if mid_value == x:: Проверка, найден ли искомый элемент.
# return mid # Элемент найден, возвращаем его индекс: Если элемент найден, возвращаем его индекс.
# elif mid_value < x:: Если искомый элемент больше, чем значение в середине массива.
# low = mid + 1 # Искомый элемент находится во второй половине массива: Обновление нижней границы для поиска во второй половине массива.
# else:: Если искомый элемент меньше, чем значение в середине массива.
# high = mid - 1 # Искомый элемент находится в первой половине массива: Обновление верхней границы для поиска в первой половине массива.
# return -1 # Элемент не найден: Если цикл завершается, и элемент не найден, возвращается -1.