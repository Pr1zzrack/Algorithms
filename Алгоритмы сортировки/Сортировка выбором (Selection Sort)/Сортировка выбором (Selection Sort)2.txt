Сортировка выбором (Selection Sort)
Преимущества:
Простота реализации.
Минимальное количество обменов элементов.
Недостатки:
Квадратичная сложность, медленная для больших массивов.
Когда использовать:
Когда важно количество обменов элементов, например, если обмены затратны.
Пример: Сортируем массив [64, 25, 12, 22, 11]. Находим минимальный элемент (11) и меняем его с первым. Повторяем для оставшихся элементов.

def selection_sort(arr):
    n = len(arr)
    for i in range(n):
        # Находим индекс минимального элемента в неотсортированной части
        min_index = i
        for j in range(i + 1, n):
            if arr[j] < arr[min_index]:
                min_index = j

        # Меняем местами найденный минимальный элемент с первым в неотсортированной части
        arr[i], arr[min_index] = arr[min_index], arr[i]
    return arr


# Пример использования
array = [64, 25, 12, 22, 11]
sorted_array = selection_sort(array)
print("Отсортированный массив:", sorted_array)

Описание Алгоритма:
На каждом шаге алгоритма ищем минимальный элемент в неотсортированной части массива.
Меняем местами найденный минимальный элемент с первым элементом в неотсортированной части.
Повторяем до тех пор, пока не отсортируем весь массив.
