Сортировка слиянием (Merge Sort)
Преимущества:
Сложность всегда O(n log n).
Устойчивая сортировка.
Недостатки:
Требует дополнительной памяти для массивов.
Когда использовать:
Для больших данных, особенно когда работа с памятью не является ограничивающим фактором.
Пример: Сортируем массив [38, 27, 43, 3, 9, 82, 10]. Разделяем массив пополам до одного элемента в подмассиве, затем сливаем и

def merge_sort(arr):
    if len(arr) > 1:
        mid = len(arr) // 2
        L = arr[:mid]
        R = arr[mid:]

        merge_sort(L)
        merge_sort(R)

        i = j = k = 0

        # Слияние двух половин
        while i < len(L) and j < len(R):
            if L[i] < R[j]:
                arr[k] = L[i]
                i += 1
            else:
                arr[k] = R[j]
                j += 1
            k += 1

        # Проверка оставшихся элементов
        while i < len(L):
            arr[k] = L[i]
            i += 1
            k += 1

        while j < len(R):
            arr[k] = R[j]
            j += 1
            k += 1

    return arr

# Пример использования
array = [38, 27, 43, 3, 9, 82, 10]
sorted_array = merge_sort(array)
print("Отсортированный массив:", sorted_array)

Описание Алгоритма:
Разделить массив на две половины.
Рекурсивно сортировать каждую половину.
Слить две отсортированные половины в один отсортированный массив.