Сортировка вставками (Insertion Sort)
Этот алгоритм прост в реализации и хорошо работает на маленьких массивах или когда массив почти отсортирован. Он устойчив, что означает сохранение порядка одинаковых элементов. Однако он становится неэффективным для больших массивов из-за квадратичной временной сложности O(n²).
Преимущества:
Простота реализации.
Эффективна для маленьких массивов или когда массив почти отсортирован.
Устойчивая сортировка (не меняет порядок равных элементов).
Недостатки:
Неэффективна для больших массивов (квадратичная сложность(On^2)).
Когда использовать:
Для небольших наборов данных.
Когда нужно дополнить уже отсортированный массив несколькими новыми элементами.
Пример: Сортируем массив [5, 2, 9, 1]. Начинаем со второго элемента (2). Сравниваем его с первым (5) и вставляем перед ним, потому что 2 < 5. Продолжаем для 9 (уже на месте), затем вставляем 1 в начало массива.

Пример 1
def insertion_sort(arr):
    for i in range(1, len(arr)):
        key = arr[i]
        j = i - 1
        while j >= 0 and key < arr[j]:
            arr[j + 1] = arr[j]
            j -= 1
        arr[j + 1] = key
        print(f"Шаг {i}: {arr}") 

# Массив для сортировки
arr = [12, 11, 13, 5, 6]
insertion_sort(arr)

Пошаговое объяснение:
На каждом шаге мы начинаем с i-го элемента и сравниваем его с предыдущими элементами.
Если i-й элемент меньше, мы смещаем предыдущие элементы вперёд, чтобы освободить место.
Вставляем i-й элемент на правильное место.

Пример 2
def insertion_sort_verbose(arr):
    for i in range(1, len(arr)):
        current_value = arr[i]
        position = i

        # Перемещаем элементы arr[0..i-1], которые больше, чем current_value,
        # на одну позицию впереди текущей позиции
        while position > 0 and arr[position - 1] > current_value:
            print(f"Перемещаем {arr[position - 1]} в позицию {position}")
            arr[position] = arr[position - 1]
            position -= 1

        # Вставляем текущее значение на правильную позицию
        print(f"Вставляем {current_value} на позицию {position}")
        arr[position] = current_value
        print(f"Результат: {arr}\n")


# Массив для сортировки
arr = [22, 27, 16, 18, 13]
insertion_sort_verbose(arr)

Пример 3
def insertion_sort_steps(arr):
    for i in range(1, len(arr)):
        key = arr[i]
        j = i - 1
        print(f"Вставляем {key}:")
        while j >= 0 and arr[j] > key:
            arr[j + 1] = arr[j]
            j -= 1
            print(f"    {arr} (сдвигаем {arr[j + 1]})")
        arr[j + 1] = key
        print(f"После вставки: {arr}\n")

# Массив для сортировки
arr = [29, 10, 14, 37, 13]
insertion_sort_steps(arr)