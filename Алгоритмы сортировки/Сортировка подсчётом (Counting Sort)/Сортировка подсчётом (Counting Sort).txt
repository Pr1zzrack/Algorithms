Сортировка подсчётом (Counting Sort)
Преимущества
Линейное время сортировки при условии, что диапазон чисел ограничен.
Устойчивая сортировка.
Недостатки
Неэффективна для массивов с большим диапазоном чисел.
Требует дополнительной памяти.
Когда использовать
Для сортировки целых чисел, когда диапазон чисел не очень велик по сравнению с количеством элементов.
Пример Сортируем массив [1, 4, 1, 2, 7, 5, 2]. Подсчитываем количество каждого числа и затем воссоздаём отсортированный массив, используя эти подсчёты.

def counting_sort(arr)
    max_val = max(arr)
    count_arr = [0]  (max_val + 1)

    # Подсчёт элементов
    for num in arr
        count_arr[num] += 1

    # Воссоздание отсортированного массива
    sorted_arr = []
    for num, count in enumerate(count_arr)
        sorted_arr.extend([num]  count)

    return sorted_arr

# Пример использования
array = [1, 4, 1, 2, 7, 5, 2]
sorted_array = counting_sort(array)
print(Отсортированный массив, sorted_array)

Описание Алгоритма
Определить диапазон чисел в массиве.
Подсчитать, сколько раз каждое число встречается в массиве.
Воссоздать отсортированный массив, используя подсчёты.