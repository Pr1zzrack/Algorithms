Быстрая сортировка (Quick Sort):

Быстрая сортировка (Quick Sort) является эффективным алгоритмом сортировки, 
который использует стратегию "разделяй и властвуй". Он был разработан Тони Хоаром 
в 1960 году и широко применяется из-за своей высокой эффективности.

Принцип работы Quick Sort:
Выбор опорного элемента: Алгоритм выбирает опорный элемент из массива. Этот элемент будет использоваться для разделения массива на две части.
Разделение на подмассивы: Массив разделяется на две части: элементы, меньшие или равные опорному (меньший подмассив), и элементы, большие опорного (больший подмассив).
Рекурсивная сортировка подмассивов: Процесс рекурсивно применяется к обоим подмассивам, пока каждый подмассив не будет отсортирован.
Объединение: После сортировки подмассивов, они объединяются так, чтобы получить отсортированный массив. Опорный элемент становится на свое место в отсортированном массиве.
Этот процесс повторяется до тех пор, пока массив не будет полностью отсортирован.

код:
    def quick_sort(arr):
        if len(arr) <= 1:
            return arr
        else:
            pivot = arr[0]
            less = [x for x in arr[1:] if x <= pivot]
            greater = [x for x in arr[1:] if x > pivot]
            return quick_sort(less) + [pivot] + quick_sort(greater)

    # Пример использования
    arr = [64, 34, 25, 12, 22, 11, 90]
    arr = quick_sort(arr)
    print("Отсортированный массив:", arr)


Объяснение:

def quick_sort(arr):: Объявление функции быстрой сортировки.
if len(arr) <= 1:: Базовый случай, возвращаем массив, если он состоит из одного элемента или пуст.
pivot = arr[0]: Выбор опорного элемента (в данном случае, первого элемента).
less = [x for x in arr[1:] if x <= pivot]: Создание списка элементов меньших или равных опорному.
greater = [x for x in arr[1:] if x > pivot]: Создание списка элементов больших опорного.
return quick_sort(less) + [pivot] + quick_sort(greater): Рекурсивное объединение отсортированных подмассивов и опорного элемента.